using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using FreecraftCore.Serializer;
using FreecraftCore;

namespace FreecraftCore.Serializer
{
    //THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!
    /// <summary>
    /// FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization
    /// code for the Type: <see cref="GroupSettingsData"/>
    /// </summary>
    public sealed partial class GroupSettingsData_AutoGeneratedTemplateSerializerStrategy
        : BaseAutoGeneratedSerializerStrategy<GroupSettingsData_AutoGeneratedTemplateSerializerStrategy, GroupSettingsData>
    {
        /// <summary>
        /// Auto-generated deserialization/read method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalRead(GroupSettingsData value, Span<byte> buffer, ref int offset)
        {
            //Type: GroupSettingsData Field: 1 Name: LootmodeSetting Type: LootMethod;
            value.LootmodeSetting = GenericPrimitiveEnumTypeSerializerStrategy<LootMethod, Byte>.Instance.Read(buffer, ref offset);
            //Type: GroupSettingsData Field: 2 Name: LootMasterGuid Type: ObjectGuid;
            value.LootMasterGuid = ObjectGuid_AutoGeneratedTemplateSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: GroupSettingsData Field: 3 Name: _LootQualityThreshold Type: Byte;
            value._LootQualityThreshold = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: GroupSettingsData Field: 4 Name: DungeonDifficulty Type: Difficulty;
            value.DungeonDifficulty = GenericPrimitiveEnumTypeSerializerStrategy<Difficulty, Byte>.Instance.Read(buffer, ref offset);
            //Type: GroupSettingsData Field: 5 Name: RaidDifficulty Type: Difficulty;
            value.RaidDifficulty = GenericPrimitiveEnumTypeSerializerStrategy<Difficulty, Byte>.Instance.Read(buffer, ref offset);
            //Type: GroupSettingsData Field: 6 Name: Unk1 Type: Boolean;
            value.Unk1 = GenericTypePrimitiveSerializerStrategy<Boolean>.Instance.Read(buffer, ref offset);
        }

        /// <summary>
        /// Auto-generated serialization/write method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalWrite(GroupSettingsData value, Span<byte> buffer, ref int offset)
        {
            //Type: GroupSettingsData Field: 1 Name: LootmodeSetting Type: LootMethod;
            GenericPrimitiveEnumTypeSerializerStrategy<LootMethod, Byte>.Instance.Write(value.LootmodeSetting, buffer, ref offset);
            //Type: GroupSettingsData Field: 2 Name: LootMasterGuid Type: ObjectGuid;
            ObjectGuid_AutoGeneratedTemplateSerializerStrategy.Instance.Write(value.LootMasterGuid, buffer, ref offset);
            //Type: GroupSettingsData Field: 3 Name: _LootQualityThreshold Type: Byte;
            BytePrimitiveSerializerStrategy.Instance.Write(value._LootQualityThreshold, buffer, ref offset);
            //Type: GroupSettingsData Field: 4 Name: DungeonDifficulty Type: Difficulty;
            GenericPrimitiveEnumTypeSerializerStrategy<Difficulty, Byte>.Instance.Write(value.DungeonDifficulty, buffer, ref offset);
            //Type: GroupSettingsData Field: 5 Name: RaidDifficulty Type: Difficulty;
            GenericPrimitiveEnumTypeSerializerStrategy<Difficulty, Byte>.Instance.Write(value.RaidDifficulty, buffer, ref offset);
            //Type: GroupSettingsData Field: 6 Name: Unk1 Type: Boolean;
            GenericTypePrimitiveSerializerStrategy<Boolean>.Instance.Write(value.Unk1, buffer, ref offset);
        }
    }
}