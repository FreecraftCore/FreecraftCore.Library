using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using FreecraftCore.Serializer;
using FreecraftCore;
namespace FreecraftCore
{
    [AutoGeneratedWireMessageImplementationAttribute]
    public partial class GamePacketPayload : IWireMessage<GamePacketPayload>
    {
        public virtual Type SerializableType => typeof(GamePacketPayload);
        public virtual GamePacketPayload Read(Span<byte> buffer, ref int offset)
        {
            GamePacketPayload_AutoGeneratedTemplateSerializerStrategy.Instance.InternalRead(this, buffer, ref offset);
            return this;
        }
        public virtual void Write(GamePacketPayload value, Span<byte> buffer, ref int offset)
        {
            GamePacketPayload_AutoGeneratedTemplateSerializerStrategy.Instance.InternalWrite(this, buffer, ref offset);
        }
    }
}

namespace FreecraftCore.Serializer
{
    //THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!
    /// <summary>
    /// FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization
    /// code for the Type: <see cref="GamePacketPayload"/>
    /// </summary>
    public sealed partial class GamePacketPayload_AutoGeneratedTemplateSerializerStrategy
        : BasePolymorphicAutoGeneratedSerializerStrategy<GamePacketPayload_AutoGeneratedTemplateSerializerStrategy, GamePacketPayload, UInt16>
    {
        protected override GamePacketPayload CreateType(int key)
        {
            switch (key)
            {
                case (int)FreecraftCore.NetworkOperationCode.CMSG_AUTH_SESSION:
                    return new SessionAuthProofRequest();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_AUTH_RESPONSE:
                    return new AuthenticateSessionResponse();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_AUTH_CHALLENGE:
                    return new SessionAuthChallengeEvent();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_CHAR_ENUM:
                    return new CharacterListRequest();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_CHAR_ENUM:
                    return new CharacterListResponse();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_PLAYER_LOGIN:
                    return new CharacterLoginRequest();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_GOSSIP_COMPLETE:
                    return new SMSG_GOSSIP_COMPLETE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_GOSSIP_MESSAGE:
                    return new SMSG_GOSSIP_MESSAGE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_GROUP_ACCEPT:
                    return new CMSG_GROUP_ACCEPT_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_GROUP_DECLINE:
                    return new CMSG_GROUP_DECLINE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_GROUP_INVITE:
                    return new CMSG_GROUP_INVITE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_GROUP_INVITE:
                    return new SMSG_GROUP_INVITE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_GROUP_LIST:
                    return new SMSG_GROUP_LIST_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_PARTY_COMMAND_RESULT:
                    return new SMSG_PARTY_COMMAND_RESULT_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_GUILD_ACCEPT:
                    return new CMSG_GUILD_ACCEPT_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_GUILD_CREATE:
                    return new CMSG_GUILD_CREATE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_GUILD_DECLINE:
                    return new CMSG_GUILD_DECLINE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_GUILD_INVITE:
                    return new CMSG_GUILD_INVITE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_GUILD_INVITE:
                    return new SMSG_GUILD_INVITE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_AREATRIGGER:
                    return new CMSG_AREATRIGGER_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_WORLDPORT_ACK:
                    return new MSG_MOVE_WORLDPORT_ACK_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_NEW_WORLD:
                    return new SMSG_NEW_WORLD_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_TRANSFER_PENDING:
                    return new SMSG_TRANSFER_PENDING_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_MOVE_FALL_RESET:
                    return new CMSG_MOVE_FALL_RESET_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_MOVE_SET_FLY:
                    return new CMSG_MOVE_SET_FLY_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_FALL_LAND:
                    return new MSG_MOVE_FALL_LAND_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_HEARTBEAT:
                    return new MSG_MOVE_HEARTBEAT_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_JUMP:
                    return new MSG_MOVE_JUMP_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_SET_FACING:
                    return new MSG_MOVE_SET_FACING_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_SET_PITCH:
                    return new MSG_MOVE_SET_PITCH_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_SET_RUN_MODE:
                    return new MSG_MOVE_SET_RUN_MODE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_SET_WALK_MODE:
                    return new MSG_MOVE_SET_WALK_MODE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_START_ASCEND:
                    return new MSG_MOVE_START_ASCEND_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_START_BACKWARD:
                    return new MSG_MOVE_START_BACKWARD_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_START_DESCEND:
                    return new MSG_MOVE_START_DESCEND_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_START_FORWARD:
                    return new MSG_MOVE_START_FORWARD_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_START_PITCH_DOWN:
                    return new MSG_MOVE_START_PITCH_DOWN_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_START_PITCH_UP:
                    return new MSG_MOVE_START_PITCH_UP_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_START_STRAFE_LEFT:
                    return new MSG_MOVE_START_STRAFE_LEFT_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_START_STRAFE_RIGHT:
                    return new MSG_MOVE_START_STRAFE_RIGHT_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_START_SWIM:
                    return new MSG_MOVE_START_SWIM_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_START_TURN_LEFT:
                    return new MSG_MOVE_START_TURN_LEFT_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_START_TURN_RIGHT:
                    return new MSG_MOVE_START_TURN_RIGHT_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_STOP_ASCEND:
                    return new MSG_MOVE_STOP_ASCEND_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_STOP:
                    return new MSG_MOVE_STOP_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_STOP_STRAFE:
                    return new MSG_MOVE_STOP_STRAFE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_STOP_SWIM:
                    return new MSG_MOVE_STOP_SWIM_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_STOP_TURN:
                    return new MSG_MOVE_STOP_TURN_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE:
                    return new SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_FORCE_FLIGHT_SPEED_CHANGE:
                    return new SMSG_FORCE_FLIGHT_SPEED_CHANGE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_FORCE_PITCH_RATE_CHANGE:
                    return new SMSG_FORCE_PITCH_RATE_CHANGE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_FORCE_RUN_BACK_SPEED_CHANGE:
                    return new SMSG_FORCE_RUN_BACK_SPEED_CHANGE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_FORCE_RUN_SPEED_CHANGE:
                    return new SMSG_FORCE_RUN_SPEED_CHANGE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_FORCE_SWIM_BACK_SPEED_CHANGE:
                    return new SMSG_FORCE_SWIM_BACK_SPEED_CHANGE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_FORCE_SWIM_SPEED_CHANGE:
                    return new SMSG_FORCE_SWIM_SPEED_CHANGE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_FORCE_TURN_RATE_CHANGE:
                    return new SMSG_FORCE_TURN_RATE_CHANGE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_FORCE_WALK_SPEED_CHANGE:
                    return new SMSG_FORCE_WALK_SPEED_CHANGE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_SET_FLIGHT_BACK_SPEED:
                    return new MSG_MOVE_SET_FLIGHT_BACK_SPEED_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_SET_FLIGHT_SPEED:
                    return new MSG_MOVE_SET_FLIGHT_SPEED_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_SET_PITCH_RATE:
                    return new MSG_MOVE_SET_PITCH_RATE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_SET_RUN_BACK_SPEED:
                    return new MSG_MOVE_SET_RUN_BACK_SPEED_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_SET_RUN_SPEED:
                    return new MSG_MOVE_SET_RUN_SPEED_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_SET_SWIM_BACK_SPEED:
                    return new MSG_MOVE_SET_SWIM_BACK_SPEED_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_SET_SWIM_SPEED:
                    return new MSG_MOVE_SET_SWIM_SPEED_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_SET_TURN_RATE:
                    return new MSG_MOVE_SET_TURN_RATE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_SET_WALK_SPEED:
                    return new MSG_MOVE_SET_WALK_SPEED_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_SPLINE_SET_FLIGHT_BACK_SPEED:
                    return new SMSG_SPLINE_SET_FLIGHT_BACK_SPEED_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_SPLINE_SET_FLIGHT_SPEED:
                    return new SMSG_SPLINE_SET_FLIGHT_SPEED_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_SPLINE_SET_PITCH_RATE:
                    return new SMSG_SPLINE_SET_PITCH_RATE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_SPLINE_SET_RUN_BACK_SPEED:
                    return new SMSG_SPLINE_SET_RUN_BACK_SPEED_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_SPLINE_SET_RUN_SPEED:
                    return new SMSG_SPLINE_SET_RUN_SPEED_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_SPLINE_SET_SWIM_BACK_SPEED:
                    return new SMSG_SPLINE_SET_SWIM_BACK_SPEED_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_SPLINE_SET_SWIM_SPEED:
                    return new SMSG_SPLINE_SET_SWIM_SPEED_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_SPLINE_SET_TURN_RATE:
                    return new SMSG_SPLINE_SET_TURN_RATE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_SPLINE_SET_WALK_SPEED:
                    return new SMSG_SPLINE_SET_WALK_SPEED_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_TELEPORT_ACK:
                    return new MSG_MOVE_TELEPORT_ACK_Payload();
                case (int)FreecraftCore.NetworkOperationCode.MSG_MOVE_TELEPORT:
                    return new MSG_MOVE_TELEPORT_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_NAME_QUERY:
                    return new CMSG_NAME_QUERY_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_NAME_QUERY_RESPONSE:
                    return new SMSG_NAME_QUERY_RESPONSE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_PING:
                    return new PingRequest();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_PONG:
                    return new PongResponse();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_GAMEOBJECT_QUERY:
                    return new CMSG_GAMEOBJECT_QUERY_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_ITEM_QUERY_SINGLE:
                    return new CMSG_ITEM_QUERY_SINGLE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_CREATURE_QUERY_RESPONSE:
                    return new SMSG_CREATURE_QUERY_RESPONSE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_GAMEOBJECT_QUERY_RESPONSE:
                    return new SMSG_GAMEOBJECT_QUERY_RESPONSE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_ITEM_QUERY_SINGLE_RESPONSE:
                    return new SMSG_ITEM_QUERY_SINGLE_RESPONSE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_QUESTGIVER_STATUS:
                    return new SMSG_QUESTGIVER_STATUS_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_QUESTGIVER_ACCEPT_QUEST:
                    return new CMSG_QUESTGIVER_ACCEPT_QUEST_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_QUESTGIVER_CHOOSE_REWARD:
                    return new CMSG_QUESTGIVER_CHOOSE_REWARD_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_QUESTGIVER_COMPLETE_QUEST:
                    return new CMSG_QUESTGIVER_COMPLETE_QUEST_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_QUESTGIVER_QUERY_QUEST:
                    return new CMSG_QUESTGIVER_QUERY_QUEST_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_QUESTGIVER_QUEST_COMPLETE:
                    return new SMSG_QUESTGIVER_QUEST_COMPLETE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_QUESTGIVER_QUEST_DETAILS:
                    return new SMSG_QUESTGIVER_QUEST_DETAILS_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_QUESTGIVER_QUEST_LIST:
                    return new SMSG_QUESTGIVER_QUEST_LIST_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_READY_FOR_ACCOUNT_DATA_TIMES:
                    return new AccountDataTimesRequest();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_ACCOUNT_DATA_TIMES:
                    return new AccountDataTimesResponse();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_CLIENTCACHE_VERSION:
                    return new ClientCacheVersionEvent();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_LOGOUT_REQUEST:
                    return new CMSG_LOGOUT_REQUEST_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_QUERY_TIME:
                    return new CMSG_QUERY_TIME_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_TIME_SYNC_RESP:
                    return new CMSG_TIME_SYNC_RESP_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_UPDATE_ACCOUNT_DATA:
                    return new CMSG_UPDATE_ACCOUNT_DATA_PAYLOAD();
                case (int)FreecraftCore.NetworkOperationCode.MSG_SET_DUNGEON_DIFFICULTY:
                    return new MSG_SET_DUNGEON_DIFFICULTY();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_REALM_SPLIT:
                    return new RealmSplitRequest();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_REALM_SPLIT:
                    return new RealmSplitResponse();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_ACTION_BUTTONS:
                    return new SMSG_ACTION_BUTTONS_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_ADDON_INFO:
                    return new SMSG_ADDON_INFO_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_FEATURE_SYSTEM_STATUS:
                    return new SMSG_FEATURE_SYSTEM_STATUS_PAYLOAD();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_INITIAL_SPELLS:
                    return new SMSG_INITIAL_SPELLS_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_INSTANCE_DIFFICULTY:
                    return new SMSG_INSTANCE_DIFFICULTY_PAYLOAD();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_LEARNED_DANCE_MOVES:
                    return new SMSG_LEARNED_DANCE_MOVES_PAYLOAD();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_LOGIN_SETTIMESPEED:
                    return new SMSG_LOGIN_SETTIMESPEED_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_LOGIN_VERIFY_WORLD:
                    return new SMSG_LOGIN_VERIFY_WORLD_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_LOGOUT_COMPLETE:
                    return new SMSG_LOGOUT_COMPLETE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_LOGOUT_RESPONSE:
                    return new SMSG_LOGOUT_RESPONSE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_MOTD:
                    return new SMSG_MOTD_PAYLOAD();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_PLAYED_TIME:
                    return new SMSG_PLAYED_TIME_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_QUERY_TIME_RESPONSE:
                    return new SMSG_QUERY_TIME_RESPONSE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_TIME_SYNC_REQ:
                    return new SMSG_TIME_SYNC_REQ_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_UPDATE_ACCOUNT_DATA_COMPLETE:
                    return new SMSG_UPDATE_ACCOUNT_DATA_COMPLETE_PAYLOAD();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_WORLD_STATE_UI_TIMER_UPDATE:
                    return new SMSG_WORLD_STATE_UI_TIMER_UPDATE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_TUTORIAL_FLAGS:
                    return new TutorialDataEvent();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_MESSAGECHAT:
                    return new ChatMessageRequest();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_STANDSTATECHANGE:
                    return new CMSG_STANDSTATECHANGE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_TEXT_EMOTE:
                    return new EmoteChatMessageRequest();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_CONTACT_LIST:
                    return new SMSG_CONTACT_LIST_PAYLOAD();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_MESSAGECHAT:
                    return new SMSG_MESSAGECHAT_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_STANDSTATE_UPDATE:
                    return new SMSG_STANDSTATE_UPDATE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_CANCEL_AURA:
                    return new CMSG_CANCEL_AURA_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_AURA_UPDATE_ALL:
                    return new SMSG_AURA_UPDATE_ALL_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_AURA_UPDATE:
                    return new SMSG_AURA_UPDATE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_CAST_SPELL:
                    return new CMSG_CAST_SPELL_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_SPELL_FAILED_OTHER:
                    return new SMSG_SPELL_FAILED_OTHER_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_SPELL_FAILURE:
                    return new SMSG_SPELL_FAILURE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_SPELL_GO:
                    return new SMSG_SPELL_GO_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_SPELL_START:
                    return new SMSG_SPELL_START_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_BEGIN_TRADE:
                    return new CMSG_BEGIN_TRADE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_TRADE_STATUS:
                    return new SMSG_TRADE_STATUS_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_GOSSIP_HELLO:
                    return new CMSG_GOSSIP_HELLO_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_QUESTGIVER_HELLO:
                    return new CMSG_QUESTGIVER_HELLO_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_SET_SELECTION:
                    return new CMSG_SET_SELECTION_Payload();
                case (int)FreecraftCore.NetworkOperationCode.CMSG_GAMEOBJ_USE:
                    return new CMSG_GAMEOBJ_USE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_CLIENT_CONTROL_UPDATE:
                    return new SMSG_CLIENT_CONTROL_UPDATE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_COMPRESSED_UPDATE_OBJECT:
                    return new SMSG_COMPRESSED_UPDATE_OBJECT_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_DESTROY_OBJECT:
                    return new SMSG_DESTROY_OBJECT_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_MONSTER_MOVE:
                    return new SMSG_MONSTER_MOVE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_POWER_UPDATE:
                    return new SMSG_POWER_UPDATE_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_UPDATE_OBJECT:
                    return new SMSG_UPDATE_OBJECT_Payload();
                case (int)FreecraftCore.NetworkOperationCode.SMSG_WARDEN_DATA:
                    return new WardenDataEvent();
                default:
                    return new UnknownGamePayload();
            }
        }
    }
}