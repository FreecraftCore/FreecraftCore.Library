using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using FreecraftCore.Serializer;
using FreecraftCore;
namespace FreecraftCore
{
    [AutoGeneratedWireMessageImplementationAttribute]
    public partial class IncomingClientPacketHeader : IWireMessage<IncomingClientPacketHeader>
    {
        public virtual Type SerializableType => typeof(IncomingClientPacketHeader);
        public virtual IncomingClientPacketHeader Read(Span<byte> buffer, ref int offset)
        {
            IncomingClientPacketHeader_AutoGeneratedTemplateSerializerStrategy.Instance.InternalRead(this, buffer, ref offset);
            return this;
        }
        public virtual void Write(IncomingClientPacketHeader value, Span<byte> buffer, ref int offset)
        {
            IncomingClientPacketHeader_AutoGeneratedTemplateSerializerStrategy.Instance.InternalWrite(this, buffer, ref offset);
        }
    }
}

namespace FreecraftCore.Serializer
{
    //THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!
    /// <summary>
    /// FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization
    /// code for the Type: <see cref="IncomingClientPacketHeader"/>
    /// </summary>
    public sealed partial class IncomingClientPacketHeader_AutoGeneratedTemplateSerializerStrategy
        : BasePolymorphicAutoGeneratedSerializerStrategy<IncomingClientPacketHeader_AutoGeneratedTemplateSerializerStrategy, IncomingClientPacketHeader, Byte, BitSerializerStrategy>
    {
        protected override IncomingClientPacketHeader CreateType(int key)
        {
            switch (key)
            {
                case 1:
                    return new IncomingClientLargePacketHeader();
                default:
                    return new IncomingClientSmallPacketHeader();
            }
        }
    }
}