using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using FreecraftCore.Serializer;
using FreecraftCore;
namespace FreecraftCore
{
    [AutoGeneratedWireMessageImplementationAttribute]
    public partial class AuthLogonChallengeResponse
    {
        public override Type SerializableType => typeof(AuthLogonChallengeResponse);
        public override AuthenticationServerPayload Read(Span<byte> buffer, ref int offset)
        {
            AuthLogonChallengeResponse_AutoGeneratedTemplateSerializerStrategy.Instance.InternalRead(this, buffer, ref offset);
            return this;
        }
        public override void Write(AuthenticationServerPayload value, Span<byte> buffer, ref int offset)
        {
            AuthLogonChallengeResponse_AutoGeneratedTemplateSerializerStrategy.Instance.InternalWrite(this, buffer, ref offset);
        }
    }
}

namespace FreecraftCore.Serializer
{
    //THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!
    /// <summary>
    /// FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization
    /// code for the Type: <see cref="AuthLogonChallengeResponse"/>
    /// </summary>
    public sealed partial class AuthLogonChallengeResponse_AutoGeneratedTemplateSerializerStrategy
        : BaseAutoGeneratedSerializerStrategy<AuthLogonChallengeResponse_AutoGeneratedTemplateSerializerStrategy, AuthLogonChallengeResponse>
    {
        /// <summary>
        /// Auto-generated deserialization/read method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalRead(AuthLogonChallengeResponse value, Span<byte> buffer, ref int offset)
        {
            //Type: AuthenticationServerPayload Field: 1 Name: OperationCode Type: AuthOperationCode;
            value.OperationCode = GenericPrimitiveEnumTypeSerializerStrategy<AuthOperationCode, Byte>.Instance.Read(buffer, ref offset);
            //Type: AuthLogonChallengeResponse Field: 1 Name: unknownResponseByte Type: Byte;
            value.unknownResponseByte = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: AuthLogonChallengeResponse Field: 2 Name: Result Type: AuthenticationResult;
            value.Result = GenericPrimitiveEnumTypeSerializerStrategy<AuthenticationResult, Byte>.Instance.Read(buffer, ref offset);
            //Type: AuthLogonChallengeResponse Field: 3 Name: Challenge Type: SRPToken;
            if (value.isAuthenticationChallengeSuccessful)value.Challenge = SRPToken_AutoGeneratedTemplateSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: AuthLogonChallengeResponse Field: 4 Name: ClientFileHMACSeed Type: Byte[];
            if (value.isAuthenticationChallengeSuccessful)value.ClientFileHMACSeed = FixedSizePrimitiveArrayTypeSerializerStrategy<byte, StaticTypedNumeric_Int32_16>.Instance.Read(buffer, ref offset);
            //Type: AuthLogonChallengeResponse Field: 5 Name: SecurityFlags Type: Byte;
            if (value.isAuthenticationChallengeSuccessful)value.SecurityFlags = BytePrimitiveSerializerStrategy.Instance.Read(buffer, ref offset);
        }

        /// <summary>
        /// Auto-generated serialization/write method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalWrite(AuthLogonChallengeResponse value, Span<byte> buffer, ref int offset)
        {
            //Type: AuthenticationServerPayload Field: 1 Name: OperationCode Type: AuthOperationCode;
            GenericPrimitiveEnumTypeSerializerStrategy<AuthOperationCode, Byte>.Instance.Write(value.OperationCode, buffer, ref offset);
            //Type: AuthLogonChallengeResponse Field: 1 Name: unknownResponseByte Type: Byte;
            BytePrimitiveSerializerStrategy.Instance.Write(value.unknownResponseByte, buffer, ref offset);
            //Type: AuthLogonChallengeResponse Field: 2 Name: Result Type: AuthenticationResult;
            GenericPrimitiveEnumTypeSerializerStrategy<AuthenticationResult, Byte>.Instance.Write(value.Result, buffer, ref offset);
            //Type: AuthLogonChallengeResponse Field: 3 Name: Challenge Type: SRPToken;
            if (value.isAuthenticationChallengeSuccessful)SRPToken_AutoGeneratedTemplateSerializerStrategy.Instance.Write(value.Challenge, buffer, ref offset);
            //Type: AuthLogonChallengeResponse Field: 4 Name: ClientFileHMACSeed Type: Byte[];
            if (value.isAuthenticationChallengeSuccessful)FixedSizePrimitiveArrayTypeSerializerStrategy<byte, StaticTypedNumeric_Int32_16>.Instance.Write(value.ClientFileHMACSeed, buffer, ref offset);
            //Type: AuthLogonChallengeResponse Field: 5 Name: SecurityFlags Type: Byte;
            if (value.isAuthenticationChallengeSuccessful)BytePrimitiveSerializerStrategy.Instance.Write(value.SecurityFlags, buffer, ref offset);
        }
        private sealed class StaticTypedNumeric_Int32_16 : StaticTypedNumeric<Int32> { public sealed override Int32 Value => 16; }
    }
}