using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using FreecraftCore.Serializer;
using FreecraftCore;

namespace FreecraftCore.Serializer
{
    //THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!
    /// <summary>
    /// FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization
    /// code for the Type: <see cref="MovementInfo"/>
    /// </summary>
    public sealed partial class MovementInfo_AutoGeneratedTemplateSerializerStrategy
        : BaseAutoGeneratedSerializerStrategy<MovementInfo_AutoGeneratedTemplateSerializerStrategy, MovementInfo>
    {
        /// <summary>
        /// Auto-generated deserialization/read method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalRead(MovementInfo value, Span<byte> buffer, ref int offset)
        {
            //Type: MovementInfo Field: 1 Name: MoveFlags Type: MovementFlag;
            value.MoveFlags = GenericPrimitiveEnumTypeSerializerStrategy<MovementFlag, UInt32>.Instance.Read(buffer, ref offset);
            //Type: MovementInfo Field: 2 Name: ExtraFlags Type: MovementFlagExtra;
            value.ExtraFlags = GenericPrimitiveEnumTypeSerializerStrategy<MovementFlagExtra, UInt16>.Instance.Read(buffer, ref offset);
            //Type: MovementInfo Field: 3 Name: TimeStamp Type: UInt32;
            value.TimeStamp = GenericTypePrimitiveSerializerStrategy<UInt32>.Instance.Read(buffer, ref offset);
            //Type: MovementInfo Field: 4 Name: Position Type: Vector3;
            value.Position = Vector3_Single_AutoGeneratedTemplateSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: MovementInfo Field: 5 Name: Orientation Type: Single;
            value.Orientation = GenericTypePrimitiveSerializerStrategy<Single>.Instance.Read(buffer, ref offset);
            //Type: MovementInfo Field: 6 Name: TransportationInformation Type: TransportationInfo;
            if (value.IsOnTransport)value.TransportationInformation = TransportationInfo_AutoGeneratedTemplateSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: MovementInfo Field: 7 Name: TransportationTime Type: Int32;
            if (value.HasTransportationTime)value.TransportationTime = GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Read(buffer, ref offset);
            //Type: MovementInfo Field: 8 Name: MovePitch Type: Single;
            if (value.HasMovementPitch)value.MovePitch = GenericTypePrimitiveSerializerStrategy<Single>.Instance.Read(buffer, ref offset);
            //Type: MovementInfo Field: 9 Name: FallTime Type: Int32;
            value.FallTime = GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Read(buffer, ref offset);
            //Type: MovementInfo Field: 10 Name: FallData Type: Vector4;
            if (value.IsFalling)value.FallData = Vector4_Single_AutoGeneratedTemplateSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: MovementInfo Field: 11 Name: SplineElevation Type: Single;
            if (value.HasSplineElevation)value.SplineElevation = GenericTypePrimitiveSerializerStrategy<Single>.Instance.Read(buffer, ref offset);
        }

        /// <summary>
        /// Auto-generated serialization/write method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalWrite(MovementInfo value, Span<byte> buffer, ref int offset)
        {
            //Type: MovementInfo Field: 1 Name: MoveFlags Type: MovementFlag;
            GenericPrimitiveEnumTypeSerializerStrategy<MovementFlag, UInt32>.Instance.Write(value.MoveFlags, buffer, ref offset);
            //Type: MovementInfo Field: 2 Name: ExtraFlags Type: MovementFlagExtra;
            GenericPrimitiveEnumTypeSerializerStrategy<MovementFlagExtra, UInt16>.Instance.Write(value.ExtraFlags, buffer, ref offset);
            //Type: MovementInfo Field: 3 Name: TimeStamp Type: UInt32;
            GenericTypePrimitiveSerializerStrategy<UInt32>.Instance.Write(value.TimeStamp, buffer, ref offset);
            //Type: MovementInfo Field: 4 Name: Position Type: Vector3;
            Vector3_Single_AutoGeneratedTemplateSerializerStrategy.Instance.Write(value.Position, buffer, ref offset);
            //Type: MovementInfo Field: 5 Name: Orientation Type: Single;
            GenericTypePrimitiveSerializerStrategy<Single>.Instance.Write(value.Orientation, buffer, ref offset);
            //Type: MovementInfo Field: 6 Name: TransportationInformation Type: TransportationInfo;
            if (value.IsOnTransport)TransportationInfo_AutoGeneratedTemplateSerializerStrategy.Instance.Write(value.TransportationInformation, buffer, ref offset);
            //Type: MovementInfo Field: 7 Name: TransportationTime Type: Int32;
            if (value.HasTransportationTime)GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Write(value.TransportationTime, buffer, ref offset);
            //Type: MovementInfo Field: 8 Name: MovePitch Type: Single;
            if (value.HasMovementPitch)GenericTypePrimitiveSerializerStrategy<Single>.Instance.Write(value.MovePitch, buffer, ref offset);
            //Type: MovementInfo Field: 9 Name: FallTime Type: Int32;
            GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Write(value.FallTime, buffer, ref offset);
            //Type: MovementInfo Field: 10 Name: FallData Type: Vector4;
            if (value.IsFalling)Vector4_Single_AutoGeneratedTemplateSerializerStrategy.Instance.Write(value.FallData, buffer, ref offset);
            //Type: MovementInfo Field: 11 Name: SplineElevation Type: Single;
            if (value.HasSplineElevation)GenericTypePrimitiveSerializerStrategy<Single>.Instance.Write(value.SplineElevation, buffer, ref offset);
        }
    }
}