using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using FreecraftCore.Serializer;
using FreecraftCore;

namespace FreecraftCore.Serializer
{
    //THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!
    /// <summary>
    /// FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization
    /// code for the Type: <see cref="CameraShakesEntry"/>
    /// </summary>
    public sealed partial class CameraShakesEntry_AutoGeneratedTemplateSerializerStrategy
        : BaseAutoGeneratedSerializerStrategy<CameraShakesEntry_AutoGeneratedTemplateSerializerStrategy, CameraShakesEntry>
    {
        /// <summary>
        /// Auto-generated deserialization/read method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalRead(CameraShakesEntry value, Span<byte> buffer, ref int offset)
        {
            //Type: CameraShakesEntry Field: 1 Name: CameraShakeId Type: Int32;
            value.CameraShakeId = GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Read(buffer, ref offset);
            //Type: CameraShakesEntry Field: 2 Name: ShakeType Type: CGCameraShakeType;
            value.ShakeType = GenericPrimitiveEnumTypeSerializerStrategy<CGCameraShakeType, Int32>.Instance.Read(buffer, ref offset);
            //Type: CameraShakesEntry Field: 3 Name: Direction Type: CGCameraDir;
            value.Direction = GenericPrimitiveEnumTypeSerializerStrategy<CGCameraDir, Int32>.Instance.Read(buffer, ref offset);
            //Type: CameraShakesEntry Field: 4 Name: Amplitude Type: Single;
            value.Amplitude = GenericTypePrimitiveSerializerStrategy<Single>.Instance.Read(buffer, ref offset);
            //Type: CameraShakesEntry Field: 5 Name: Frequency Type: Single;
            value.Frequency = GenericTypePrimitiveSerializerStrategy<Single>.Instance.Read(buffer, ref offset);
            //Type: CameraShakesEntry Field: 6 Name: Duration Type: Single;
            value.Duration = GenericTypePrimitiveSerializerStrategy<Single>.Instance.Read(buffer, ref offset);
            //Type: CameraShakesEntry Field: 7 Name: Phase Type: Single;
            value.Phase = GenericTypePrimitiveSerializerStrategy<Single>.Instance.Read(buffer, ref offset);
            //Type: CameraShakesEntry Field: 8 Name: Coefficient Type: Single;
            value.Coefficient = GenericTypePrimitiveSerializerStrategy<Single>.Instance.Read(buffer, ref offset);
        }

        /// <summary>
        /// Auto-generated serialization/write method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalWrite(CameraShakesEntry value, Span<byte> buffer, ref int offset)
        {
            //Type: CameraShakesEntry Field: 1 Name: CameraShakeId Type: Int32;
            GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Write(value.CameraShakeId, buffer, ref offset);
            //Type: CameraShakesEntry Field: 2 Name: ShakeType Type: CGCameraShakeType;
            GenericPrimitiveEnumTypeSerializerStrategy<CGCameraShakeType, Int32>.Instance.Write(value.ShakeType, buffer, ref offset);
            //Type: CameraShakesEntry Field: 3 Name: Direction Type: CGCameraDir;
            GenericPrimitiveEnumTypeSerializerStrategy<CGCameraDir, Int32>.Instance.Write(value.Direction, buffer, ref offset);
            //Type: CameraShakesEntry Field: 4 Name: Amplitude Type: Single;
            GenericTypePrimitiveSerializerStrategy<Single>.Instance.Write(value.Amplitude, buffer, ref offset);
            //Type: CameraShakesEntry Field: 5 Name: Frequency Type: Single;
            GenericTypePrimitiveSerializerStrategy<Single>.Instance.Write(value.Frequency, buffer, ref offset);
            //Type: CameraShakesEntry Field: 6 Name: Duration Type: Single;
            GenericTypePrimitiveSerializerStrategy<Single>.Instance.Write(value.Duration, buffer, ref offset);
            //Type: CameraShakesEntry Field: 7 Name: Phase Type: Single;
            GenericTypePrimitiveSerializerStrategy<Single>.Instance.Write(value.Phase, buffer, ref offset);
            //Type: CameraShakesEntry Field: 8 Name: Coefficient Type: Single;
            GenericTypePrimitiveSerializerStrategy<Single>.Instance.Write(value.Coefficient, buffer, ref offset);
        }
    }
}