using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using FreecraftCore.Serializer;
using FreecraftCore;
namespace FreecraftCore
{
    [AutoGeneratedWireMessageImplementationAttribute]
    public partial class PlayerChatMessage : IWireMessage<PlayerChatMessage>
    {
        public virtual Type SerializableType => typeof(PlayerChatMessage);
        public virtual PlayerChatMessage Read(Span<byte> buffer, ref int offset)
        {
            PlayerChatMessage_AutoGeneratedTemplateSerializerStrategy.Instance.InternalRead(this, buffer, ref offset);
            return this;
        }
        public virtual void Write(PlayerChatMessage value, Span<byte> buffer, ref int offset)
        {
            PlayerChatMessage_AutoGeneratedTemplateSerializerStrategy.Instance.InternalWrite(this, buffer, ref offset);
        }
    }
}

namespace FreecraftCore.Serializer
{
    //THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!
    /// <summary>
    /// FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization
    /// code for the Type: <see cref="PlayerChatMessage"/>
    /// </summary>
    public sealed partial class PlayerChatMessage_AutoGeneratedTemplateSerializerStrategy
        : BasePolymorphicAutoGeneratedSerializerStrategy<PlayerChatMessage_AutoGeneratedTemplateSerializerStrategy, PlayerChatMessage, Int32>
    {
        protected override PlayerChatMessage CreateType(int key)
        {
            switch (key)
            {
                case 4:
                    return new GuildPlayerChatMessage();
                case 17:
                    return new ChannelPlayerChatMessage();
                case 7:
                    return new WhisperPlayerChatMessage();
                case 1:
                    return new SayPlayerChatMessage();
                case 23:
                    return new PlayerAfkChatMessage();
                default:
                    return new DefaultPlayerChatMessage();
            }
        }
    }
}