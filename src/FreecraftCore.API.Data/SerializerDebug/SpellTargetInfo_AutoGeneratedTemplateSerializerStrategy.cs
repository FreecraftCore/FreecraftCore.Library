using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using FreecraftCore.Serializer;
using FreecraftCore;

namespace FreecraftCore.Serializer
{
    //THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!
    /// <summary>
    /// FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization
    /// code for the Type: <see cref="SpellTargetInfo"/>
    /// </summary>
    public sealed partial class SpellTargetInfo_AutoGeneratedTemplateSerializerStrategy
        : BaseAutoGeneratedSerializerStrategy<SpellTargetInfo_AutoGeneratedTemplateSerializerStrategy, SpellTargetInfo>
    {
        /// <summary>
        /// Auto-generated deserialization/read method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalRead(SpellTargetInfo value, Span<byte> buffer, ref int offset)
        {
            //Type: SpellTargetInfo Field: 1 Name: TargetFlags Type: SpellCastTargetFlag;
            value.TargetFlags = GenericPrimitiveEnumTypeSerializerStrategy<SpellCastTargetFlag, UInt32>.Instance.Read(buffer, ref offset);
            //Type: SpellTargetInfo Field: 2 Name: OptionalObjectTarget Type: PackedGuid;
            if (value.HasObjectTarget)value.OptionalObjectTarget = CustomPackedGuidTypeSerializer.Instance.Read(buffer, ref offset);
            //Type: SpellTargetInfo Field: 3 Name: OptionalItemTarget Type: PackedGuid;
            if (value.HasItemTarget)value.OptionalItemTarget = CustomPackedGuidTypeSerializer.Instance.Read(buffer, ref offset);
            //Type: SpellTargetInfo Field: 4 Name: OptionalTransportSourceLocation Type: PackedGuid;
            if (value.HasTransportSourceLocation)value.OptionalTransportSourceLocation = CustomPackedGuidTypeSerializer.Instance.Read(buffer, ref offset);
            //Type: SpellTargetInfo Field: 5 Name: OptionalTransportSourcePosition Type: Vector3;
            if (value.HasTransportSourceLocation)value.OptionalTransportSourcePosition = Vector3_Single_AutoGeneratedTemplateSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: SpellTargetInfo Field: 6 Name: OptionalTransportDestination Type: PackedGuid;
            if (value.HasTransportDestinationLocation)value.OptionalTransportDestination = CustomPackedGuidTypeSerializer.Instance.Read(buffer, ref offset);
            //Type: SpellTargetInfo Field: 7 Name: OptionalTransportDestinationPosition Type: Vector3;
            if (value.HasTransportDestinationLocation)value.OptionalTransportDestinationPosition = Vector3_Single_AutoGeneratedTemplateSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: SpellTargetInfo Field: 8 Name: OptionalTargetString Type: String;
            if (value.HasTargetString)value.OptionalTargetString = TerminatedStringTypeSerializerStrategy<ASCIIStringTypeSerializerStrategy, ASCIIStringTerminatorTypeSerializerStrategy>.Instance.Read(buffer, ref offset);
        }

        /// <summary>
        /// Auto-generated serialization/write method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalWrite(SpellTargetInfo value, Span<byte> buffer, ref int offset)
        {
            //Type: SpellTargetInfo Field: 1 Name: TargetFlags Type: SpellCastTargetFlag;
            GenericPrimitiveEnumTypeSerializerStrategy<SpellCastTargetFlag, UInt32>.Instance.Write(value.TargetFlags, buffer, ref offset);
            //Type: SpellTargetInfo Field: 2 Name: OptionalObjectTarget Type: PackedGuid;
            if (value.HasObjectTarget)CustomPackedGuidTypeSerializer.Instance.Write(value.OptionalObjectTarget, buffer, ref offset);
            //Type: SpellTargetInfo Field: 3 Name: OptionalItemTarget Type: PackedGuid;
            if (value.HasItemTarget)CustomPackedGuidTypeSerializer.Instance.Write(value.OptionalItemTarget, buffer, ref offset);
            //Type: SpellTargetInfo Field: 4 Name: OptionalTransportSourceLocation Type: PackedGuid;
            if (value.HasTransportSourceLocation)CustomPackedGuidTypeSerializer.Instance.Write(value.OptionalTransportSourceLocation, buffer, ref offset);
            //Type: SpellTargetInfo Field: 5 Name: OptionalTransportSourcePosition Type: Vector3;
            if (value.HasTransportSourceLocation)Vector3_Single_AutoGeneratedTemplateSerializerStrategy.Instance.Write(value.OptionalTransportSourcePosition, buffer, ref offset);
            //Type: SpellTargetInfo Field: 6 Name: OptionalTransportDestination Type: PackedGuid;
            if (value.HasTransportDestinationLocation)CustomPackedGuidTypeSerializer.Instance.Write(value.OptionalTransportDestination, buffer, ref offset);
            //Type: SpellTargetInfo Field: 7 Name: OptionalTransportDestinationPosition Type: Vector3;
            if (value.HasTransportDestinationLocation)Vector3_Single_AutoGeneratedTemplateSerializerStrategy.Instance.Write(value.OptionalTransportDestinationPosition, buffer, ref offset);
            //Type: SpellTargetInfo Field: 8 Name: OptionalTargetString Type: String;
            if (value.HasTargetString)TerminatedStringTypeSerializerStrategy<ASCIIStringTypeSerializerStrategy, ASCIIStringTerminatorTypeSerializerStrategy>.Instance.Write(value.OptionalTargetString, buffer, ref offset);
        }
    }
}