using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using FreecraftCore.Serializer;
using FreecraftCore;

namespace FreecraftCore.Serializer
{
    //THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!
    /// <summary>
    /// FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization
    /// code for the Type: <see cref="MonsterSplineInfo"/>
    /// </summary>
    public sealed partial class MonsterSplineInfo_AutoGeneratedTemplateSerializerStrategy
        : BaseAutoGeneratedSerializerStrategy<MonsterSplineInfo_AutoGeneratedTemplateSerializerStrategy, MonsterSplineInfo>
    {
        /// <summary>
        /// Auto-generated deserialization/read method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalRead(MonsterSplineInfo value, Span<byte> buffer, ref int offset)
        {
            //Type: MonsterSplineInfo Field: 6 Name: SplineFlags Type: SplineMoveFlags;
            value.SplineFlags = GenericPrimitiveEnumTypeSerializerStrategy<SplineMoveFlags, UInt32>.Instance.Read(buffer, ref offset);
            //Type: MonsterSplineInfo Field: 7 Name: OptionalAnimationInformation Type: AnimationInfo;
            if (value.HasAnimationInformation)value.OptionalAnimationInformation = AnimationInfo_AutoGeneratedTemplateSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: MonsterSplineInfo Field: 8 Name: SplineDuration Type: Int32;
            value.SplineDuration = GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Read(buffer, ref offset);
            //Type: MonsterSplineInfo Field: 9 Name: OptionalParabolicSplineInformation Type: ParabolicMoveInfo;
            if (value.HasParabolicSplineInfo)value.OptionalParabolicSplineInformation = ParabolicMoveInfo_AutoGeneratedTemplateSerializerStrategy.Instance.Read(buffer, ref offset);
            //Type: MonsterSplineInfo Field: 10 Name: OptionalCatMulRomSplinePoints Type: Vector3[];
            if (value.HasCatMulRomSpline)value.OptionalCatMulRomSplinePoints = SendSizeComplexArrayTypeSerializerStrategy<Vector3_Single_AutoGeneratedTemplateSerializerStrategy, Vector3, Int32>.Instance.Read(buffer, ref offset);
            //Type: MonsterSplineInfo Field: 11 Name: OptionalLinearPathInformation Type: LinearPathMoveInfo;
            if (value.HasLinearPath)value.OptionalLinearPathInformation = LinearPathMoveInfoTypeSerializer.Instance.Read(buffer, ref offset);
        }

        /// <summary>
        /// Auto-generated serialization/write method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalWrite(MonsterSplineInfo value, Span<byte> buffer, ref int offset)
        {
            //Type: MonsterSplineInfo Field: 6 Name: SplineFlags Type: SplineMoveFlags;
            GenericPrimitiveEnumTypeSerializerStrategy<SplineMoveFlags, UInt32>.Instance.Write(value.SplineFlags, buffer, ref offset);
            //Type: MonsterSplineInfo Field: 7 Name: OptionalAnimationInformation Type: AnimationInfo;
            if (value.HasAnimationInformation)AnimationInfo_AutoGeneratedTemplateSerializerStrategy.Instance.Write(value.OptionalAnimationInformation, buffer, ref offset);
            //Type: MonsterSplineInfo Field: 8 Name: SplineDuration Type: Int32;
            GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Write(value.SplineDuration, buffer, ref offset);
            //Type: MonsterSplineInfo Field: 9 Name: OptionalParabolicSplineInformation Type: ParabolicMoveInfo;
            if (value.HasParabolicSplineInfo)ParabolicMoveInfo_AutoGeneratedTemplateSerializerStrategy.Instance.Write(value.OptionalParabolicSplineInformation, buffer, ref offset);
            //Type: MonsterSplineInfo Field: 10 Name: OptionalCatMulRomSplinePoints Type: Vector3[];
            if (value.HasCatMulRomSpline)SendSizeComplexArrayTypeSerializerStrategy<Vector3_Single_AutoGeneratedTemplateSerializerStrategy, Vector3, Int32>.Instance.Write(value.OptionalCatMulRomSplinePoints, buffer, ref offset);
            //Type: MonsterSplineInfo Field: 11 Name: OptionalLinearPathInformation Type: LinearPathMoveInfo;
            if (value.HasLinearPath)LinearPathMoveInfoTypeSerializer.Instance.Write(value.OptionalLinearPathInformation, buffer, ref offset);
        }
    }
}