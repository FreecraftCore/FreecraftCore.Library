using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using FreecraftCore.Serializer;
using FreecraftCore;

namespace FreecraftCore.Serializer
{
    //THIS CODE IS FOR AUTO-GENERATED SERIALIZERS! DO NOT MODIFY UNLESS YOU KNOW WELL!
    /// <summary>
    /// FreecraftCore.Serializer's AUTO-GENERATED (do not edit) serialization
    /// code for the Type: <see cref="AddonChecksumResult"/>
    /// </summary>
    public sealed partial class AddonChecksumResult_AutoGeneratedTemplateSerializerStrategy
        : BaseAutoGeneratedSerializerStrategy<AddonChecksumResult_AutoGeneratedTemplateSerializerStrategy, AddonChecksumResult>
    {
        /// <summary>
        /// Auto-generated deserialization/read method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalRead(AddonChecksumResult value, Span<byte> buffer, ref int offset)
        {
            //Type: AddonChecksumResult Field: 1 Name: AddonState Type: SecureAddonStatus;
            value.AddonState = GenericPrimitiveEnumTypeSerializerStrategy<SecureAddonStatus, Byte>.Instance.Read(buffer, ref offset);
            //Type: AddonChecksumResult Field: 2 Name: UseCrc Type: Boolean;
            value.UseCrc = GenericTypePrimitiveSerializerStrategy<Boolean>.Instance.Read(buffer, ref offset);
            //Type: AddonChecksumResult Field: 3 Name: UsePublicKey Type: Boolean;
            value.UsePublicKey = GenericTypePrimitiveSerializerStrategy<Boolean>.Instance.Read(buffer, ref offset);
            //Type: AddonChecksumResult Field: 4 Name: PublicKey Type: Byte[];
            if (value.UsePublicKey)value.PublicKey = FixedSizePrimitiveArrayTypeSerializerStrategy<byte, StaticTypedNumeric_Int32_256>.Instance.Read(buffer, ref offset);
            //Type: AddonChecksumResult Field: 5 Name: Unk Type: Int32;
            if (value.UseCrc)value.Unk = GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Read(buffer, ref offset);
            //Type: AddonChecksumResult Field: 6 Name: UseUrl Type: Boolean;
            value.UseUrl = GenericTypePrimitiveSerializerStrategy<Boolean>.Instance.Read(buffer, ref offset);
        }

        /// <summary>
        /// Auto-generated serialization/write method.
        /// Partial method implemented from shared partial definition.
        /// </summary>
        /// <param name="value">See external doc.</param>
        /// <param name="buffer">See external doc.</param>
        /// <param name="offset">See external doc.</param>
        public override void InternalWrite(AddonChecksumResult value, Span<byte> buffer, ref int offset)
        {
            //Type: AddonChecksumResult Field: 1 Name: AddonState Type: SecureAddonStatus;
            GenericPrimitiveEnumTypeSerializerStrategy<SecureAddonStatus, Byte>.Instance.Write(value.AddonState, buffer, ref offset);
            //Type: AddonChecksumResult Field: 2 Name: UseCrc Type: Boolean;
            GenericTypePrimitiveSerializerStrategy<Boolean>.Instance.Write(value.UseCrc, buffer, ref offset);
            //Type: AddonChecksumResult Field: 3 Name: UsePublicKey Type: Boolean;
            GenericTypePrimitiveSerializerStrategy<Boolean>.Instance.Write(value.UsePublicKey, buffer, ref offset);
            //Type: AddonChecksumResult Field: 4 Name: PublicKey Type: Byte[];
            if (value.UsePublicKey)FixedSizePrimitiveArrayTypeSerializerStrategy<byte, StaticTypedNumeric_Int32_256>.Instance.Write(value.PublicKey, buffer, ref offset);
            //Type: AddonChecksumResult Field: 5 Name: Unk Type: Int32;
            if (value.UseCrc)GenericTypePrimitiveSerializerStrategy<Int32>.Instance.Write(value.Unk, buffer, ref offset);
            //Type: AddonChecksumResult Field: 6 Name: UseUrl Type: Boolean;
            GenericTypePrimitiveSerializerStrategy<Boolean>.Instance.Write(value.UseUrl, buffer, ref offset);
        }
        private sealed class StaticTypedNumeric_Int32_256 : StaticTypedNumeric<Int32> { public sealed override Int32 Value => 256; }
    }
}